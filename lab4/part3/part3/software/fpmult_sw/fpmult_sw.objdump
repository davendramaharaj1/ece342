
fpmult_sw.elf:     file format elf32-littlenios2
fpmult_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00000e94 memsz 0x00000e94 flags r-x
    LOAD off    0x00001eb4 vaddr 0x00004eb4 paddr 0x000054a0 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x00002a8c vaddr 0x00005a8c paddr 0x00005a8c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00004020  00004020  000024a0  2**0
                  CONTENTS
  2 .text         00000d84  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  00004da4  00004da4  00001da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  00004eb4  000054a0  00001eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00005a8c  00005a8c  00002a8c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00005a9c  00005a9c  000024a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000024a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000308  00000000  00000000  000024c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003f30  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013c6  00000000  00000000  00006700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001488  00000000  00000000  00007ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000484  00000000  00000000  00008f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000010a1  00000000  00000000  000093d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000bce  00000000  00000000  0000a475  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b044  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000100  00000000  00000000  0000b058  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c289  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c28c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c299  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000c29a  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000c29e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000c2a2  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000c2a6  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000014  00000000  00000000  0000c2b1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0002a65c  00000000  00000000  0000c2c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004020 l    d  .text	00000000 .text
00004da4 l    d  .rodata	00000000 .rodata
00004eb4 l    d  .rwdata	00000000 .rwdata
00005a8c l    d  .bss	00000000 .bss
00005a9c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../fpmult_sw_bsp//obj/HAL/src/crt0.o
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00004600 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
000047a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000048d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000505c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000046ec g     F .text	00000060 alt_main
000054a0 g       *ABS*	00000000 __flash_rwdata_start
00004a68 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005a98 g     O .bss	00000004 errno
00005a90 g     O .bss	00000004 alt_argv
0000d480 g       *ABS*	00000000 _gp
00004edc g     O .rwdata	00000180 alt_fd_list
00004da4 g       *ABS*	00000000 __DTOR_END__
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005490 g     O .rwdata	00000004 alt_max_fd
00005498 g     O .rwdata	00000004 _global_impure_ptr
00005a9c g       *ABS*	00000000 __bss_end
00004eb4 g     O .rwdata	00000028 alt_dev_null
000048b8 g     F .text	00000020 alt_dcache_flush_all
000054a0 g       *ABS*	00000000 __ram_rwdata_end
00005488 g     O .rwdata	00000008 alt_dev_list
00004eb4 g       *ABS*	00000000 __ram_rodata_end
00005a9c g       *ABS*	00000000 end
00004da4 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00004574 g     F .text	00000064 .hidden __clzsi2
00004bf0 g     F .text	00000180 __call_exitprocs
00004020 g     F .text	0000003c _start
00004784 g     F .text	00000020 alt_sys_init
00004ad8 g     F .text	00000118 __register_exitproc
000045d8 g     F .text	00000028 .hidden __mulsi3
00004eb4 g       *ABS*	00000000 __ram_rwdata_start
00004da4 g       *ABS*	00000000 __ram_rodata_start
00005a9c g       *ABS*	00000000 __alt_stack_base
00005a8c g       *ABS*	00000000 __bss_start
0000405c g     F .text	000000e8 main
00005a94 g     O .bss	00000004 alt_envp
00005494 g     O .rwdata	00000004 alt_errno
00004da4 g       *ABS*	00000000 __CTOR_END__
00004144 g     F .text	00000430 .hidden __mulsf3
00004da4 g       *ABS*	00000000 __flash_rodata_start
00004da4 g       *ABS*	00000000 __DTOR_LIST__
0000474c g     F .text	00000038 alt_irq_init
000049e4 g     F .text	00000084 alt_release_fd
00004da4 g     O .rodata	00000100 .hidden __clz_tab
00004a8c g     F .text	00000014 atexit
0000549c g     O .rwdata	00000004 _impure_ptr
00005a8c g     O .bss	00000004 alt_argc
00004964 g     F .text	00000060 _do_dtors
00005480 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
000054a0 g       *ABS*	00000000 _edata
00005a9c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
00004aa0 g     F .text	00000038 exit
00008000 g       *ABS*	00000000 __alt_data_end
00004d70 g     F .text	00000034 _exit
000049c4 g     F .text	00000020 alt_icache_flush_all
00004904 g     F .text	00000060 _do_ctors
000047e0 g     F .text	000000d8 close
00004668 g     F .text	00000084 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00004020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b52014 	ori	gp,gp,54400
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1096a314 	ori	r2,r2,23180

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d6a714 	ori	r3,r3,23196

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_gp+0xffff6bc4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00046680 	call	4668 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00046ec0 	call	46ec <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <_gp+0xffff6bd8>

0000405c <main>:
#include "../fpmult_sw_bsp/system.h"

#define MEMORY_BASE (ONCHIP_MEMORY2_0_BASE + 0x3000)

int main(void)
{
    405c:	defff504 	addi	sp,sp,-44
    4060:	dfc00a15 	stw	ra,40(sp)
    4064:	df000915 	stw	fp,36(sp)
    4068:	df000904 	addi	fp,sp,36
	volatile float* memory_op1 = (float*) MEMORY_BASE;
    406c:	009c0004 	movi	r2,28672
    4070:	e0bff715 	stw	r2,-36(fp)
	volatile float* memory_op2 = (float*) (MEMORY_BASE + 4);
    4074:	009c0104 	movi	r2,28676
    4078:	e0bff815 	stw	r2,-32(fp)
	volatile float* memory_out = (float*) (MEMORY_BASE + 8);
    407c:	009c0204 	movi	r2,28680
    4080:	e0bff915 	stw	r2,-28(fp)
	volatile float* memory_out2 = (float*) (MEMORY_BASE + 12);
    4084:	009c0304 	movi	r2,28684
    4088:	e0bffa15 	stw	r2,-24(fp)
	volatile int* memory_start = (int*) (MEMORY_BASE + 16);
    408c:	009c0404 	movi	r2,28688
    4090:	e0bffb15 	stw	r2,-20(fp)
	volatile float* acc_op1 = (float*) AVS_FP_MULT_0_BASE;
    4094:	00a40014 	movui	r2,36864
    4098:	e0bffc15 	stw	r2,-16(fp)
	volatile float* acc_op2 = (float*) (AVS_FP_MULT_0_BASE + 4);
    409c:	00a40114 	movui	r2,36868
    40a0:	e0bffd15 	stw	r2,-12(fp)
	volatile float* acc_out = (float*) (AVS_FP_MULT_0_BASE + 12);
    40a4:	00a40314 	movui	r2,36876
    40a8:	e0bffe15 	stw	r2,-8(fp)
	volatile int* acc_start = (int*) (AVS_FP_MULT_0_BASE + 8);
    40ac:	00a40214 	movui	r2,36872
    40b0:	e0bfff15 	stw	r2,-4(fp)
	while (1)
	{
		// STUDENTS TO ADD THES
        // 1. Write 1 to the memory start location
        // This will be automatically cleared later by the marker/tester
		*memory_start = 1;
    40b4:	e0bffb17 	ldw	r2,-20(fp)
    40b8:	00c00044 	movi	r3,1
    40bc:	10c00015 	stw	r3,0(r2)
		
		// 2. Perform software multiplication (just using the C++ multiplication operand)
        // The operands will be set for you by the marker/tester
		*memory_out = (*memory_op1) * (*memory_op2);
    40c0:	e0bff717 	ldw	r2,-36(fp)
    40c4:	10c00017 	ldw	r3,0(r2)
    40c8:	e0bff817 	ldw	r2,-32(fp)
    40cc:	11000017 	ldw	r4,0(r2)
    40d0:	200b883a 	mov	r5,r4
    40d4:	1809883a 	mov	r4,r3
    40d8:	00041440 	call	4144 <__mulsf3>
    40dc:	1009883a 	mov	r4,r2
    40e0:	2007883a 	mov	r3,r4
    40e4:	e0bff917 	ldw	r2,-28(fp)
    40e8:	10c00015 	stw	r3,0(r2)
		
		// 3. Copy multiplication operands from memory operand locations to accelerator 
        // operand locations
		*acc_op1 = *memory_op1;
    40ec:	e0bff717 	ldw	r2,-36(fp)
    40f0:	10c00017 	ldw	r3,0(r2)
    40f4:	e0bffc17 	ldw	r2,-16(fp)
    40f8:	10c00015 	stw	r3,0(r2)
		*acc_op2 = *memory_op2;
    40fc:	e0bff817 	ldw	r2,-32(fp)
    4100:	10c00017 	ldw	r3,0(r2)
    4104:	e0bffd17 	ldw	r2,-12(fp)
    4108:	10c00015 	stw	r3,0(r2)
		
		// 4. Perform hardware multiplication by writing to the accelerator start register 
        // and waiting for the bus flag to become deasserted
		*acc_start = 1;
    410c:	e0bfff17 	ldw	r2,-4(fp)
    4110:	00c00044 	movi	r3,1
    4114:	10c00015 	stw	r3,0(r2)

		while(*acc_start){
    4118:	e0bfff17 	ldw	r2,-4(fp)
    411c:	10800017 	ldw	r2,0(r2)
    4120:	1004c03a 	cmpne	r2,r2,zero
    4124:	10803fcc 	andi	r2,r2,255
    4128:	10000126 	beq	r2,zero,4130 <main+0xd4>
    412c:	003ffa06 	br	4118 <_gp+0xffff6c98>

		}
        
        // 5. Copy the accelerator result to memory_out2
		*memory_out2 = *acc_out;
    4130:	e0bffe17 	ldw	r2,-8(fp)
    4134:	10c00017 	ldw	r3,0(r2)
    4138:	e0bffa17 	ldw	r2,-24(fp)
    413c:	10c00015 	stw	r3,0(r2)
	volatile float* acc_op1 = (float*) AVS_FP_MULT_0_BASE;
	volatile float* acc_op2 = (float*) (AVS_FP_MULT_0_BASE + 4);
	volatile float* acc_out = (float*) (AVS_FP_MULT_0_BASE + 12);
	volatile int* acc_start = (int*) (AVS_FP_MULT_0_BASE + 8);

	while (1)
    4140:	003fdc06 	br	40b4 <_gp+0xffff6c34>

00004144 <__mulsf3>:
    4144:	defff504 	addi	sp,sp,-44
    4148:	dc000115 	stw	r16,4(sp)
    414c:	2020d5fa 	srli	r16,r4,23
    4150:	dd400615 	stw	r21,24(sp)
    4154:	202ad7fa 	srli	r21,r4,31
    4158:	dc800315 	stw	r18,12(sp)
    415c:	04802034 	movhi	r18,128
    4160:	df000915 	stw	fp,36(sp)
    4164:	dd000515 	stw	r20,20(sp)
    4168:	94bfffc4 	addi	r18,r18,-1
    416c:	dfc00a15 	stw	ra,40(sp)
    4170:	ddc00815 	stw	r23,32(sp)
    4174:	dd800715 	stw	r22,28(sp)
    4178:	dcc00415 	stw	r19,16(sp)
    417c:	dc400215 	stw	r17,8(sp)
    4180:	84003fcc 	andi	r16,r16,255
    4184:	9124703a 	and	r18,r18,r4
    4188:	a829883a 	mov	r20,r21
    418c:	af003fcc 	andi	fp,r21,255
    4190:	80005426 	beq	r16,zero,42e4 <__mulsf3+0x1a0>
    4194:	00803fc4 	movi	r2,255
    4198:	80802f26 	beq	r16,r2,4258 <__mulsf3+0x114>
    419c:	91002034 	orhi	r4,r18,128
    41a0:	202490fa 	slli	r18,r4,3
    41a4:	843fe044 	addi	r16,r16,-127
    41a8:	0023883a 	mov	r17,zero
    41ac:	002f883a 	mov	r23,zero
    41b0:	2804d5fa 	srli	r2,r5,23
    41b4:	282cd7fa 	srli	r22,r5,31
    41b8:	01002034 	movhi	r4,128
    41bc:	213fffc4 	addi	r4,r4,-1
    41c0:	10803fcc 	andi	r2,r2,255
    41c4:	2166703a 	and	r19,r4,r5
    41c8:	b1803fcc 	andi	r6,r22,255
    41cc:	10004c26 	beq	r2,zero,4300 <__mulsf3+0x1bc>
    41d0:	00c03fc4 	movi	r3,255
    41d4:	10c04726 	beq	r2,r3,42f4 <__mulsf3+0x1b0>
    41d8:	99002034 	orhi	r4,r19,128
    41dc:	202690fa 	slli	r19,r4,3
    41e0:	10bfe044 	addi	r2,r2,-127
    41e4:	0007883a 	mov	r3,zero
    41e8:	80a1883a 	add	r16,r16,r2
    41ec:	010003c4 	movi	r4,15
    41f0:	1c44b03a 	or	r2,r3,r17
    41f4:	b56af03a 	xor	r21,r22,r21
    41f8:	81c00044 	addi	r7,r16,1
    41fc:	20806b36 	bltu	r4,r2,43ac <__mulsf3+0x268>
    4200:	100490ba 	slli	r2,r2,2
    4204:	01000034 	movhi	r4,0
    4208:	21108604 	addi	r4,r4,16920
    420c:	1105883a 	add	r2,r2,r4
    4210:	10800017 	ldw	r2,0(r2)
    4214:	1000683a 	jmp	r2
    4218:	000043ac 	andhi	zero,zero,270
    421c:	0000426c 	andhi	zero,zero,265
    4220:	0000426c 	andhi	zero,zero,265
    4224:	00004268 	cmpgeui	zero,zero,265
    4228:	00004390 	cmplti	zero,zero,270
    422c:	00004390 	cmplti	zero,zero,270
    4230:	0000437c 	xorhi	zero,zero,269
    4234:	00004268 	cmpgeui	zero,zero,265
    4238:	00004390 	cmplti	zero,zero,270
    423c:	0000437c 	xorhi	zero,zero,269
    4240:	00004390 	cmplti	zero,zero,270
    4244:	00004268 	cmpgeui	zero,zero,265
    4248:	0000439c 	xori	zero,zero,270
    424c:	0000439c 	xori	zero,zero,270
    4250:	0000439c 	xori	zero,zero,270
    4254:	000044ac 	andhi	zero,zero,274
    4258:	90003b1e 	bne	r18,zero,4348 <__mulsf3+0x204>
    425c:	04400204 	movi	r17,8
    4260:	05c00084 	movi	r23,2
    4264:	003fd206 	br	41b0 <_gp+0xffff6d30>
    4268:	302b883a 	mov	r21,r6
    426c:	00800084 	movi	r2,2
    4270:	18802626 	beq	r3,r2,430c <__mulsf3+0x1c8>
    4274:	008000c4 	movi	r2,3
    4278:	1880b826 	beq	r3,r2,455c <__mulsf3+0x418>
    427c:	00800044 	movi	r2,1
    4280:	1880af1e 	bne	r3,r2,4540 <__mulsf3+0x3fc>
    4284:	a829883a 	mov	r20,r21
    4288:	0007883a 	mov	r3,zero
    428c:	0009883a 	mov	r4,zero
    4290:	18803fcc 	andi	r2,r3,255
    4294:	100695fa 	slli	r3,r2,23
    4298:	a0803fcc 	andi	r2,r20,255
    429c:	100a97fa 	slli	r5,r2,31
    42a0:	00802034 	movhi	r2,128
    42a4:	10bfffc4 	addi	r2,r2,-1
    42a8:	2084703a 	and	r2,r4,r2
    42ac:	10c4b03a 	or	r2,r2,r3
    42b0:	1144b03a 	or	r2,r2,r5
    42b4:	dfc00a17 	ldw	ra,40(sp)
    42b8:	df000917 	ldw	fp,36(sp)
    42bc:	ddc00817 	ldw	r23,32(sp)
    42c0:	dd800717 	ldw	r22,28(sp)
    42c4:	dd400617 	ldw	r21,24(sp)
    42c8:	dd000517 	ldw	r20,20(sp)
    42cc:	dcc00417 	ldw	r19,16(sp)
    42d0:	dc800317 	ldw	r18,12(sp)
    42d4:	dc400217 	ldw	r17,8(sp)
    42d8:	dc000117 	ldw	r16,4(sp)
    42dc:	dec00b04 	addi	sp,sp,44
    42e0:	f800283a 	ret
    42e4:	90000d1e 	bne	r18,zero,431c <__mulsf3+0x1d8>
    42e8:	04400104 	movi	r17,4
    42ec:	05c00044 	movi	r23,1
    42f0:	003faf06 	br	41b0 <_gp+0xffff6d30>
    42f4:	9806c03a 	cmpne	r3,r19,zero
    42f8:	18c00084 	addi	r3,r3,2
    42fc:	003fba06 	br	41e8 <_gp+0xffff6d68>
    4300:	9800141e 	bne	r19,zero,4354 <__mulsf3+0x210>
    4304:	00c00044 	movi	r3,1
    4308:	003fb706 	br	41e8 <_gp+0xffff6d68>
    430c:	a829883a 	mov	r20,r21
    4310:	00ffffc4 	movi	r3,-1
    4314:	0009883a 	mov	r4,zero
    4318:	003fdd06 	br	4290 <_gp+0xffff6e10>
    431c:	9009883a 	mov	r4,r18
    4320:	d9400015 	stw	r5,0(sp)
    4324:	00045740 	call	4574 <__clzsi2>
    4328:	10fffec4 	addi	r3,r2,-5
    432c:	10801d84 	addi	r2,r2,118
    4330:	90e4983a 	sll	r18,r18,r3
    4334:	00a1c83a 	sub	r16,zero,r2
    4338:	0023883a 	mov	r17,zero
    433c:	002f883a 	mov	r23,zero
    4340:	d9400017 	ldw	r5,0(sp)
    4344:	003f9a06 	br	41b0 <_gp+0xffff6d30>
    4348:	04400304 	movi	r17,12
    434c:	05c000c4 	movi	r23,3
    4350:	003f9706 	br	41b0 <_gp+0xffff6d30>
    4354:	9809883a 	mov	r4,r19
    4358:	d9800015 	stw	r6,0(sp)
    435c:	00045740 	call	4574 <__clzsi2>
    4360:	10fffec4 	addi	r3,r2,-5
    4364:	10801d84 	addi	r2,r2,118
    4368:	98e6983a 	sll	r19,r19,r3
    436c:	0085c83a 	sub	r2,zero,r2
    4370:	0007883a 	mov	r3,zero
    4374:	d9800017 	ldw	r6,0(sp)
    4378:	003f9b06 	br	41e8 <_gp+0xffff6d68>
    437c:	01002034 	movhi	r4,128
    4380:	0029883a 	mov	r20,zero
    4384:	213fffc4 	addi	r4,r4,-1
    4388:	00ffffc4 	movi	r3,-1
    438c:	003fc006 	br	4290 <_gp+0xffff6e10>
    4390:	9027883a 	mov	r19,r18
    4394:	b807883a 	mov	r3,r23
    4398:	003fb406 	br	426c <_gp+0xffff6dec>
    439c:	9027883a 	mov	r19,r18
    43a0:	e02b883a 	mov	r21,fp
    43a4:	b807883a 	mov	r3,r23
    43a8:	003fb006 	br	426c <_gp+0xffff6dec>
    43ac:	9028d43a 	srli	r20,r18,16
    43b0:	982cd43a 	srli	r22,r19,16
    43b4:	94bfffcc 	andi	r18,r18,65535
    43b8:	9cffffcc 	andi	r19,r19,65535
    43bc:	980b883a 	mov	r5,r19
    43c0:	9009883a 	mov	r4,r18
    43c4:	d9c00015 	stw	r7,0(sp)
    43c8:	00045d80 	call	45d8 <__mulsi3>
    43cc:	a00b883a 	mov	r5,r20
    43d0:	9809883a 	mov	r4,r19
    43d4:	1023883a 	mov	r17,r2
    43d8:	00045d80 	call	45d8 <__mulsi3>
    43dc:	a009883a 	mov	r4,r20
    43e0:	b00b883a 	mov	r5,r22
    43e4:	1027883a 	mov	r19,r2
    43e8:	00045d80 	call	45d8 <__mulsi3>
    43ec:	b00b883a 	mov	r5,r22
    43f0:	9009883a 	mov	r4,r18
    43f4:	1029883a 	mov	r20,r2
    43f8:	00045d80 	call	45d8 <__mulsi3>
    43fc:	8806d43a 	srli	r3,r17,16
    4400:	14c5883a 	add	r2,r2,r19
    4404:	d9c00017 	ldw	r7,0(sp)
    4408:	1885883a 	add	r2,r3,r2
    440c:	14c0022e 	bgeu	r2,r19,4418 <__mulsf3+0x2d4>
    4410:	00c00074 	movhi	r3,1
    4414:	a0e9883a 	add	r20,r20,r3
    4418:	1026943a 	slli	r19,r2,16
    441c:	8c7fffcc 	andi	r17,r17,65535
    4420:	1004d43a 	srli	r2,r2,16
    4424:	9c63883a 	add	r17,r19,r17
    4428:	882691ba 	slli	r19,r17,6
    442c:	1505883a 	add	r2,r2,r20
    4430:	8822d6ba 	srli	r17,r17,26
    4434:	100891ba 	slli	r4,r2,6
    4438:	9826c03a 	cmpne	r19,r19,zero
    443c:	9c62b03a 	or	r17,r19,r17
    4440:	8926b03a 	or	r19,r17,r4
    4444:	9882002c 	andhi	r2,r19,2048
    4448:	10000426 	beq	r2,zero,445c <__mulsf3+0x318>
    444c:	9804d07a 	srli	r2,r19,1
    4450:	9900004c 	andi	r4,r19,1
    4454:	3821883a 	mov	r16,r7
    4458:	1126b03a 	or	r19,r2,r4
    445c:	80c01fc4 	addi	r3,r16,127
    4460:	00c0210e 	bge	zero,r3,44e8 <__mulsf3+0x3a4>
    4464:	988001cc 	andi	r2,r19,7
    4468:	10000426 	beq	r2,zero,447c <__mulsf3+0x338>
    446c:	988003cc 	andi	r2,r19,15
    4470:	01000104 	movi	r4,4
    4474:	11000126 	beq	r2,r4,447c <__mulsf3+0x338>
    4478:	9927883a 	add	r19,r19,r4
    447c:	9882002c 	andhi	r2,r19,2048
    4480:	10000426 	beq	r2,zero,4494 <__mulsf3+0x350>
    4484:	00be0034 	movhi	r2,63488
    4488:	10bfffc4 	addi	r2,r2,-1
    448c:	80c02004 	addi	r3,r16,128
    4490:	98a6703a 	and	r19,r19,r2
    4494:	00803f84 	movi	r2,254
    4498:	10ff9c16 	blt	r2,r3,430c <_gp+0xffff6e8c>
    449c:	980891ba 	slli	r4,r19,6
    44a0:	a829883a 	mov	r20,r21
    44a4:	2008d27a 	srli	r4,r4,9
    44a8:	003f7906 	br	4290 <_gp+0xffff6e10>
    44ac:	9080102c 	andhi	r2,r18,64
    44b0:	10000826 	beq	r2,zero,44d4 <__mulsf3+0x390>
    44b4:	9880102c 	andhi	r2,r19,64
    44b8:	1000061e 	bne	r2,zero,44d4 <__mulsf3+0x390>
    44bc:	00802034 	movhi	r2,128
    44c0:	99001034 	orhi	r4,r19,64
    44c4:	10bfffc4 	addi	r2,r2,-1
    44c8:	b029883a 	mov	r20,r22
    44cc:	2088703a 	and	r4,r4,r2
    44d0:	003fad06 	br	4388 <_gp+0xffff6f08>
    44d4:	00802034 	movhi	r2,128
    44d8:	91001034 	orhi	r4,r18,64
    44dc:	10bfffc4 	addi	r2,r2,-1
    44e0:	2088703a 	and	r4,r4,r2
    44e4:	003fa806 	br	4388 <_gp+0xffff6f08>
    44e8:	00800044 	movi	r2,1
    44ec:	10c7c83a 	sub	r3,r2,r3
    44f0:	008006c4 	movi	r2,27
    44f4:	10ff6316 	blt	r2,r3,4284 <_gp+0xffff6e04>
    44f8:	00800804 	movi	r2,32
    44fc:	10c5c83a 	sub	r2,r2,r3
    4500:	9884983a 	sll	r2,r19,r2
    4504:	98c6d83a 	srl	r3,r19,r3
    4508:	1004c03a 	cmpne	r2,r2,zero
    450c:	1884b03a 	or	r2,r3,r2
    4510:	10c001cc 	andi	r3,r2,7
    4514:	18000426 	beq	r3,zero,4528 <__mulsf3+0x3e4>
    4518:	10c003cc 	andi	r3,r2,15
    451c:	01000104 	movi	r4,4
    4520:	19000126 	beq	r3,r4,4528 <__mulsf3+0x3e4>
    4524:	1105883a 	add	r2,r2,r4
    4528:	10c1002c 	andhi	r3,r2,1024
    452c:	18000626 	beq	r3,zero,4548 <__mulsf3+0x404>
    4530:	a829883a 	mov	r20,r21
    4534:	00c00044 	movi	r3,1
    4538:	0009883a 	mov	r4,zero
    453c:	003f5406 	br	4290 <_gp+0xffff6e10>
    4540:	3821883a 	mov	r16,r7
    4544:	003fc506 	br	445c <_gp+0xffff6fdc>
    4548:	100491ba 	slli	r2,r2,6
    454c:	a829883a 	mov	r20,r21
    4550:	0007883a 	mov	r3,zero
    4554:	1008d27a 	srli	r4,r2,9
    4558:	003f4d06 	br	4290 <_gp+0xffff6e10>
    455c:	00802034 	movhi	r2,128
    4560:	99001034 	orhi	r4,r19,64
    4564:	10bfffc4 	addi	r2,r2,-1
    4568:	a829883a 	mov	r20,r21
    456c:	2088703a 	and	r4,r4,r2
    4570:	003f8506 	br	4388 <_gp+0xffff6f08>

00004574 <__clzsi2>:
    4574:	00bfffd4 	movui	r2,65535
    4578:	11000536 	bltu	r2,r4,4590 <__clzsi2+0x1c>
    457c:	00803fc4 	movi	r2,255
    4580:	11000f36 	bltu	r2,r4,45c0 <__clzsi2+0x4c>
    4584:	00800804 	movi	r2,32
    4588:	0007883a 	mov	r3,zero
    458c:	00000506 	br	45a4 <__clzsi2+0x30>
    4590:	00804034 	movhi	r2,256
    4594:	10bfffc4 	addi	r2,r2,-1
    4598:	11000c2e 	bgeu	r2,r4,45cc <__clzsi2+0x58>
    459c:	00800204 	movi	r2,8
    45a0:	00c00604 	movi	r3,24
    45a4:	20c8d83a 	srl	r4,r4,r3
    45a8:	00c00034 	movhi	r3,0
    45ac:	18d36904 	addi	r3,r3,19876
    45b0:	1909883a 	add	r4,r3,r4
    45b4:	20c00003 	ldbu	r3,0(r4)
    45b8:	10c5c83a 	sub	r2,r2,r3
    45bc:	f800283a 	ret
    45c0:	00800604 	movi	r2,24
    45c4:	00c00204 	movi	r3,8
    45c8:	003ff606 	br	45a4 <_gp+0xffff7124>
    45cc:	00800404 	movi	r2,16
    45d0:	1007883a 	mov	r3,r2
    45d4:	003ff306 	br	45a4 <_gp+0xffff7124>

000045d8 <__mulsi3>:
    45d8:	0005883a 	mov	r2,zero
    45dc:	20000726 	beq	r4,zero,45fc <__mulsi3+0x24>
    45e0:	20c0004c 	andi	r3,r4,1
    45e4:	2008d07a 	srli	r4,r4,1
    45e8:	18000126 	beq	r3,zero,45f0 <__mulsi3+0x18>
    45ec:	1145883a 	add	r2,r2,r5
    45f0:	294b883a 	add	r5,r5,r5
    45f4:	203ffa1e 	bne	r4,zero,45e0 <_gp+0xffff7160>
    45f8:	f800283a 	ret
    45fc:	f800283a 	ret

00004600 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4600:	defffc04 	addi	sp,sp,-16
    4604:	df000315 	stw	fp,12(sp)
    4608:	df000304 	addi	fp,sp,12
    460c:	e13ffd15 	stw	r4,-12(fp)
    4610:	e17ffe15 	stw	r5,-8(fp)
    4614:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4618:	e0fffe17 	ldw	r3,-8(fp)
    461c:	e0bffd17 	ldw	r2,-12(fp)
    4620:	18800c26 	beq	r3,r2,4654 <alt_load_section+0x54>
  {
    while( to != end )
    4624:	00000806 	br	4648 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4628:	e0bffe17 	ldw	r2,-8(fp)
    462c:	10c00104 	addi	r3,r2,4
    4630:	e0fffe15 	stw	r3,-8(fp)
    4634:	e0fffd17 	ldw	r3,-12(fp)
    4638:	19000104 	addi	r4,r3,4
    463c:	e13ffd15 	stw	r4,-12(fp)
    4640:	18c00017 	ldw	r3,0(r3)
    4644:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4648:	e0fffe17 	ldw	r3,-8(fp)
    464c:	e0bfff17 	ldw	r2,-4(fp)
    4650:	18bff51e 	bne	r3,r2,4628 <_gp+0xffff71a8>
    {
      *to++ = *from++;
    }
  }
}
    4654:	0001883a 	nop
    4658:	e037883a 	mov	sp,fp
    465c:	df000017 	ldw	fp,0(sp)
    4660:	dec00104 	addi	sp,sp,4
    4664:	f800283a 	ret

00004668 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4668:	defffe04 	addi	sp,sp,-8
    466c:	dfc00115 	stw	ra,4(sp)
    4670:	df000015 	stw	fp,0(sp)
    4674:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4678:	01800034 	movhi	r6,0
    467c:	31952804 	addi	r6,r6,21664
    4680:	01400034 	movhi	r5,0
    4684:	2953ad04 	addi	r5,r5,20148
    4688:	01000034 	movhi	r4,0
    468c:	21152804 	addi	r4,r4,21664
    4690:	00046000 	call	4600 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4694:	01800034 	movhi	r6,0
    4698:	31900804 	addi	r6,r6,16416
    469c:	01400034 	movhi	r5,0
    46a0:	29500804 	addi	r5,r5,16416
    46a4:	01000034 	movhi	r4,0
    46a8:	21100804 	addi	r4,r4,16416
    46ac:	00046000 	call	4600 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    46b0:	01800034 	movhi	r6,0
    46b4:	3193ad04 	addi	r6,r6,20148
    46b8:	01400034 	movhi	r5,0
    46bc:	29536904 	addi	r5,r5,19876
    46c0:	01000034 	movhi	r4,0
    46c4:	21136904 	addi	r4,r4,19876
    46c8:	00046000 	call	4600 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    46cc:	00048b80 	call	48b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    46d0:	00049c40 	call	49c4 <alt_icache_flush_all>
}
    46d4:	0001883a 	nop
    46d8:	e037883a 	mov	sp,fp
    46dc:	dfc00117 	ldw	ra,4(sp)
    46e0:	df000017 	ldw	fp,0(sp)
    46e4:	dec00204 	addi	sp,sp,8
    46e8:	f800283a 	ret

000046ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    46ec:	defffd04 	addi	sp,sp,-12
    46f0:	dfc00215 	stw	ra,8(sp)
    46f4:	df000115 	stw	fp,4(sp)
    46f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    46fc:	0009883a 	mov	r4,zero
    4700:	000474c0 	call	474c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4704:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4708:	00047840 	call	4784 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    470c:	00049040 	call	4904 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    4710:	01000034 	movhi	r4,0
    4714:	21125904 	addi	r4,r4,18788
    4718:	0004a8c0 	call	4a8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    471c:	d0a18317 	ldw	r2,-31220(gp)
    4720:	d0e18417 	ldw	r3,-31216(gp)
    4724:	d1218517 	ldw	r4,-31212(gp)
    4728:	200d883a 	mov	r6,r4
    472c:	180b883a 	mov	r5,r3
    4730:	1009883a 	mov	r4,r2
    4734:	000405c0 	call	405c <main>
    4738:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    473c:	01000044 	movi	r4,1
    4740:	00047e00 	call	47e0 <close>
  exit (result);
    4744:	e13fff17 	ldw	r4,-4(fp)
    4748:	0004aa00 	call	4aa0 <exit>

0000474c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    474c:	defffd04 	addi	sp,sp,-12
    4750:	dfc00215 	stw	ra,8(sp)
    4754:	df000115 	stw	fp,4(sp)
    4758:	df000104 	addi	fp,sp,4
    475c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    4760:	0004a680 	call	4a68 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4764:	00800044 	movi	r2,1
    4768:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    476c:	0001883a 	nop
    4770:	e037883a 	mov	sp,fp
    4774:	dfc00117 	ldw	ra,4(sp)
    4778:	df000017 	ldw	fp,0(sp)
    477c:	dec00204 	addi	sp,sp,8
    4780:	f800283a 	ret

00004784 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4784:	deffff04 	addi	sp,sp,-4
    4788:	df000015 	stw	fp,0(sp)
    478c:	d839883a 	mov	fp,sp
}
    4790:	0001883a 	nop
    4794:	e037883a 	mov	sp,fp
    4798:	df000017 	ldw	fp,0(sp)
    479c:	dec00104 	addi	sp,sp,4
    47a0:	f800283a 	ret

000047a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    47a4:	defffe04 	addi	sp,sp,-8
    47a8:	dfc00115 	stw	ra,4(sp)
    47ac:	df000015 	stw	fp,0(sp)
    47b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    47b4:	d0a00517 	ldw	r2,-32748(gp)
    47b8:	10000326 	beq	r2,zero,47c8 <alt_get_errno+0x24>
    47bc:	d0a00517 	ldw	r2,-32748(gp)
    47c0:	103ee83a 	callr	r2
    47c4:	00000106 	br	47cc <alt_get_errno+0x28>
    47c8:	d0a18604 	addi	r2,gp,-31208
}
    47cc:	e037883a 	mov	sp,fp
    47d0:	dfc00117 	ldw	ra,4(sp)
    47d4:	df000017 	ldw	fp,0(sp)
    47d8:	dec00204 	addi	sp,sp,8
    47dc:	f800283a 	ret

000047e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    47e0:	defffb04 	addi	sp,sp,-20
    47e4:	dfc00415 	stw	ra,16(sp)
    47e8:	df000315 	stw	fp,12(sp)
    47ec:	df000304 	addi	fp,sp,12
    47f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    47f4:	e0bfff17 	ldw	r2,-4(fp)
    47f8:	10000816 	blt	r2,zero,481c <close+0x3c>
    47fc:	01400304 	movi	r5,12
    4800:	e13fff17 	ldw	r4,-4(fp)
    4804:	00045d80 	call	45d8 <__mulsi3>
    4808:	1007883a 	mov	r3,r2
    480c:	00800034 	movhi	r2,0
    4810:	1093b704 	addi	r2,r2,20188
    4814:	1885883a 	add	r2,r3,r2
    4818:	00000106 	br	4820 <close+0x40>
    481c:	0005883a 	mov	r2,zero
    4820:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    4824:	e0bffd17 	ldw	r2,-12(fp)
    4828:	10001926 	beq	r2,zero,4890 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    482c:	e0bffd17 	ldw	r2,-12(fp)
    4830:	10800017 	ldw	r2,0(r2)
    4834:	10800417 	ldw	r2,16(r2)
    4838:	10000626 	beq	r2,zero,4854 <close+0x74>
    483c:	e0bffd17 	ldw	r2,-12(fp)
    4840:	10800017 	ldw	r2,0(r2)
    4844:	10800417 	ldw	r2,16(r2)
    4848:	e13ffd17 	ldw	r4,-12(fp)
    484c:	103ee83a 	callr	r2
    4850:	00000106 	br	4858 <close+0x78>
    4854:	0005883a 	mov	r2,zero
    4858:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    485c:	e13fff17 	ldw	r4,-4(fp)
    4860:	00049e40 	call	49e4 <alt_release_fd>
    if (rval < 0)
    4864:	e0bffe17 	ldw	r2,-8(fp)
    4868:	1000070e 	bge	r2,zero,4888 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    486c:	00047a40 	call	47a4 <alt_get_errno>
    4870:	1007883a 	mov	r3,r2
    4874:	e0bffe17 	ldw	r2,-8(fp)
    4878:	0085c83a 	sub	r2,zero,r2
    487c:	18800015 	stw	r2,0(r3)
      return -1;
    4880:	00bfffc4 	movi	r2,-1
    4884:	00000706 	br	48a4 <close+0xc4>
    }
    return 0;
    4888:	0005883a 	mov	r2,zero
    488c:	00000506 	br	48a4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    4890:	00047a40 	call	47a4 <alt_get_errno>
    4894:	1007883a 	mov	r3,r2
    4898:	00801444 	movi	r2,81
    489c:	18800015 	stw	r2,0(r3)
    return -1;
    48a0:	00bfffc4 	movi	r2,-1
  }
}
    48a4:	e037883a 	mov	sp,fp
    48a8:	dfc00117 	ldw	ra,4(sp)
    48ac:	df000017 	ldw	fp,0(sp)
    48b0:	dec00204 	addi	sp,sp,8
    48b4:	f800283a 	ret

000048b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    48b8:	deffff04 	addi	sp,sp,-4
    48bc:	df000015 	stw	fp,0(sp)
    48c0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    48c4:	0001883a 	nop
    48c8:	e037883a 	mov	sp,fp
    48cc:	df000017 	ldw	fp,0(sp)
    48d0:	dec00104 	addi	sp,sp,4
    48d4:	f800283a 	ret

000048d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    48d8:	defffc04 	addi	sp,sp,-16
    48dc:	df000315 	stw	fp,12(sp)
    48e0:	df000304 	addi	fp,sp,12
    48e4:	e13ffd15 	stw	r4,-12(fp)
    48e8:	e17ffe15 	stw	r5,-8(fp)
    48ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
    48f0:	e0bfff17 	ldw	r2,-4(fp)
}
    48f4:	e037883a 	mov	sp,fp
    48f8:	df000017 	ldw	fp,0(sp)
    48fc:	dec00104 	addi	sp,sp,4
    4900:	f800283a 	ret

00004904 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    4904:	defffd04 	addi	sp,sp,-12
    4908:	dfc00215 	stw	ra,8(sp)
    490c:	df000115 	stw	fp,4(sp)
    4910:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4914:	00800034 	movhi	r2,0
    4918:	10936804 	addi	r2,r2,19872
    491c:	e0bfff15 	stw	r2,-4(fp)
    4920:	00000606 	br	493c <_do_ctors+0x38>
        (*ctor) (); 
    4924:	e0bfff17 	ldw	r2,-4(fp)
    4928:	10800017 	ldw	r2,0(r2)
    492c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    4930:	e0bfff17 	ldw	r2,-4(fp)
    4934:	10bfff04 	addi	r2,r2,-4
    4938:	e0bfff15 	stw	r2,-4(fp)
    493c:	e0ffff17 	ldw	r3,-4(fp)
    4940:	00800034 	movhi	r2,0
    4944:	10936904 	addi	r2,r2,19876
    4948:	18bff62e 	bgeu	r3,r2,4924 <_gp+0xffff74a4>
        (*ctor) (); 
}
    494c:	0001883a 	nop
    4950:	e037883a 	mov	sp,fp
    4954:	dfc00117 	ldw	ra,4(sp)
    4958:	df000017 	ldw	fp,0(sp)
    495c:	dec00204 	addi	sp,sp,8
    4960:	f800283a 	ret

00004964 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    4964:	defffd04 	addi	sp,sp,-12
    4968:	dfc00215 	stw	ra,8(sp)
    496c:	df000115 	stw	fp,4(sp)
    4970:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4974:	00800034 	movhi	r2,0
    4978:	10936804 	addi	r2,r2,19872
    497c:	e0bfff15 	stw	r2,-4(fp)
    4980:	00000606 	br	499c <_do_dtors+0x38>
        (*dtor) (); 
    4984:	e0bfff17 	ldw	r2,-4(fp)
    4988:	10800017 	ldw	r2,0(r2)
    498c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4990:	e0bfff17 	ldw	r2,-4(fp)
    4994:	10bfff04 	addi	r2,r2,-4
    4998:	e0bfff15 	stw	r2,-4(fp)
    499c:	e0ffff17 	ldw	r3,-4(fp)
    49a0:	00800034 	movhi	r2,0
    49a4:	10936904 	addi	r2,r2,19876
    49a8:	18bff62e 	bgeu	r3,r2,4984 <_gp+0xffff7504>
        (*dtor) (); 
}
    49ac:	0001883a 	nop
    49b0:	e037883a 	mov	sp,fp
    49b4:	dfc00117 	ldw	ra,4(sp)
    49b8:	df000017 	ldw	fp,0(sp)
    49bc:	dec00204 	addi	sp,sp,8
    49c0:	f800283a 	ret

000049c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    49c4:	deffff04 	addi	sp,sp,-4
    49c8:	df000015 	stw	fp,0(sp)
    49cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    49d0:	0001883a 	nop
    49d4:	e037883a 	mov	sp,fp
    49d8:	df000017 	ldw	fp,0(sp)
    49dc:	dec00104 	addi	sp,sp,4
    49e0:	f800283a 	ret

000049e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    49e4:	defffc04 	addi	sp,sp,-16
    49e8:	dfc00315 	stw	ra,12(sp)
    49ec:	df000215 	stw	fp,8(sp)
    49f0:	dc000115 	stw	r16,4(sp)
    49f4:	df000204 	addi	fp,sp,8
    49f8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    49fc:	e0bffe17 	ldw	r2,-8(fp)
    4a00:	108000d0 	cmplti	r2,r2,3
    4a04:	1000111e 	bne	r2,zero,4a4c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    4a08:	04000034 	movhi	r16,0
    4a0c:	8413b704 	addi	r16,r16,20188
    4a10:	e0bffe17 	ldw	r2,-8(fp)
    4a14:	01400304 	movi	r5,12
    4a18:	1009883a 	mov	r4,r2
    4a1c:	00045d80 	call	45d8 <__mulsi3>
    4a20:	8085883a 	add	r2,r16,r2
    4a24:	10800204 	addi	r2,r2,8
    4a28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    4a2c:	04000034 	movhi	r16,0
    4a30:	8413b704 	addi	r16,r16,20188
    4a34:	e0bffe17 	ldw	r2,-8(fp)
    4a38:	01400304 	movi	r5,12
    4a3c:	1009883a 	mov	r4,r2
    4a40:	00045d80 	call	45d8 <__mulsi3>
    4a44:	8085883a 	add	r2,r16,r2
    4a48:	10000015 	stw	zero,0(r2)
  }
}
    4a4c:	0001883a 	nop
    4a50:	e6ffff04 	addi	sp,fp,-4
    4a54:	dfc00217 	ldw	ra,8(sp)
    4a58:	df000117 	ldw	fp,4(sp)
    4a5c:	dc000017 	ldw	r16,0(sp)
    4a60:	dec00304 	addi	sp,sp,12
    4a64:	f800283a 	ret

00004a68 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    4a68:	deffff04 	addi	sp,sp,-4
    4a6c:	df000015 	stw	fp,0(sp)
    4a70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4a74:	000170fa 	wrctl	ienable,zero
}
    4a78:	0001883a 	nop
    4a7c:	e037883a 	mov	sp,fp
    4a80:	df000017 	ldw	fp,0(sp)
    4a84:	dec00104 	addi	sp,sp,4
    4a88:	f800283a 	ret

00004a8c <atexit>:
    4a8c:	200b883a 	mov	r5,r4
    4a90:	000f883a 	mov	r7,zero
    4a94:	000d883a 	mov	r6,zero
    4a98:	0009883a 	mov	r4,zero
    4a9c:	0004ad81 	jmpi	4ad8 <__register_exitproc>

00004aa0 <exit>:
    4aa0:	defffe04 	addi	sp,sp,-8
    4aa4:	000b883a 	mov	r5,zero
    4aa8:	dc000015 	stw	r16,0(sp)
    4aac:	dfc00115 	stw	ra,4(sp)
    4ab0:	2021883a 	mov	r16,r4
    4ab4:	0004bf00 	call	4bf0 <__call_exitprocs>
    4ab8:	00800034 	movhi	r2,0
    4abc:	10952604 	addi	r2,r2,21656
    4ac0:	11000017 	ldw	r4,0(r2)
    4ac4:	20800f17 	ldw	r2,60(r4)
    4ac8:	10000126 	beq	r2,zero,4ad0 <exit+0x30>
    4acc:	103ee83a 	callr	r2
    4ad0:	8009883a 	mov	r4,r16
    4ad4:	0004d700 	call	4d70 <_exit>

00004ad8 <__register_exitproc>:
    4ad8:	defffa04 	addi	sp,sp,-24
    4adc:	dc000315 	stw	r16,12(sp)
    4ae0:	04000034 	movhi	r16,0
    4ae4:	84152604 	addi	r16,r16,21656
    4ae8:	80c00017 	ldw	r3,0(r16)
    4aec:	dc400415 	stw	r17,16(sp)
    4af0:	dfc00515 	stw	ra,20(sp)
    4af4:	18805217 	ldw	r2,328(r3)
    4af8:	2023883a 	mov	r17,r4
    4afc:	10003726 	beq	r2,zero,4bdc <__register_exitproc+0x104>
    4b00:	10c00117 	ldw	r3,4(r2)
    4b04:	010007c4 	movi	r4,31
    4b08:	20c00e16 	blt	r4,r3,4b44 <__register_exitproc+0x6c>
    4b0c:	1a000044 	addi	r8,r3,1
    4b10:	8800221e 	bne	r17,zero,4b9c <__register_exitproc+0xc4>
    4b14:	18c00084 	addi	r3,r3,2
    4b18:	18c7883a 	add	r3,r3,r3
    4b1c:	18c7883a 	add	r3,r3,r3
    4b20:	12000115 	stw	r8,4(r2)
    4b24:	10c7883a 	add	r3,r2,r3
    4b28:	19400015 	stw	r5,0(r3)
    4b2c:	0005883a 	mov	r2,zero
    4b30:	dfc00517 	ldw	ra,20(sp)
    4b34:	dc400417 	ldw	r17,16(sp)
    4b38:	dc000317 	ldw	r16,12(sp)
    4b3c:	dec00604 	addi	sp,sp,24
    4b40:	f800283a 	ret
    4b44:	00800034 	movhi	r2,0
    4b48:	10800004 	addi	r2,r2,0
    4b4c:	10002626 	beq	r2,zero,4be8 <__register_exitproc+0x110>
    4b50:	01006404 	movi	r4,400
    4b54:	d9400015 	stw	r5,0(sp)
    4b58:	d9800115 	stw	r6,4(sp)
    4b5c:	d9c00215 	stw	r7,8(sp)
    4b60:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4b64:	d9400017 	ldw	r5,0(sp)
    4b68:	d9800117 	ldw	r6,4(sp)
    4b6c:	d9c00217 	ldw	r7,8(sp)
    4b70:	10001d26 	beq	r2,zero,4be8 <__register_exitproc+0x110>
    4b74:	81000017 	ldw	r4,0(r16)
    4b78:	10000115 	stw	zero,4(r2)
    4b7c:	02000044 	movi	r8,1
    4b80:	22405217 	ldw	r9,328(r4)
    4b84:	0007883a 	mov	r3,zero
    4b88:	12400015 	stw	r9,0(r2)
    4b8c:	20805215 	stw	r2,328(r4)
    4b90:	10006215 	stw	zero,392(r2)
    4b94:	10006315 	stw	zero,396(r2)
    4b98:	883fde26 	beq	r17,zero,4b14 <_gp+0xffff7694>
    4b9c:	18c9883a 	add	r4,r3,r3
    4ba0:	2109883a 	add	r4,r4,r4
    4ba4:	1109883a 	add	r4,r2,r4
    4ba8:	21802215 	stw	r6,136(r4)
    4bac:	01800044 	movi	r6,1
    4bb0:	12406217 	ldw	r9,392(r2)
    4bb4:	30cc983a 	sll	r6,r6,r3
    4bb8:	4992b03a 	or	r9,r9,r6
    4bbc:	12406215 	stw	r9,392(r2)
    4bc0:	21c04215 	stw	r7,264(r4)
    4bc4:	01000084 	movi	r4,2
    4bc8:	893fd21e 	bne	r17,r4,4b14 <_gp+0xffff7694>
    4bcc:	11006317 	ldw	r4,396(r2)
    4bd0:	218cb03a 	or	r6,r4,r6
    4bd4:	11806315 	stw	r6,396(r2)
    4bd8:	003fce06 	br	4b14 <_gp+0xffff7694>
    4bdc:	18805304 	addi	r2,r3,332
    4be0:	18805215 	stw	r2,328(r3)
    4be4:	003fc606 	br	4b00 <_gp+0xffff7680>
    4be8:	00bfffc4 	movi	r2,-1
    4bec:	003fd006 	br	4b30 <_gp+0xffff76b0>

00004bf0 <__call_exitprocs>:
    4bf0:	defff504 	addi	sp,sp,-44
    4bf4:	df000915 	stw	fp,36(sp)
    4bf8:	dd400615 	stw	r21,24(sp)
    4bfc:	dc800315 	stw	r18,12(sp)
    4c00:	dfc00a15 	stw	ra,40(sp)
    4c04:	ddc00815 	stw	r23,32(sp)
    4c08:	dd800715 	stw	r22,28(sp)
    4c0c:	dd000515 	stw	r20,20(sp)
    4c10:	dcc00415 	stw	r19,16(sp)
    4c14:	dc400215 	stw	r17,8(sp)
    4c18:	dc000115 	stw	r16,4(sp)
    4c1c:	d9000015 	stw	r4,0(sp)
    4c20:	2839883a 	mov	fp,r5
    4c24:	04800044 	movi	r18,1
    4c28:	057fffc4 	movi	r21,-1
    4c2c:	00800034 	movhi	r2,0
    4c30:	10952604 	addi	r2,r2,21656
    4c34:	12000017 	ldw	r8,0(r2)
    4c38:	45005217 	ldw	r20,328(r8)
    4c3c:	44c05204 	addi	r19,r8,328
    4c40:	a0001c26 	beq	r20,zero,4cb4 <__call_exitprocs+0xc4>
    4c44:	a0800117 	ldw	r2,4(r20)
    4c48:	15ffffc4 	addi	r23,r2,-1
    4c4c:	b8000d16 	blt	r23,zero,4c84 <__call_exitprocs+0x94>
    4c50:	14000044 	addi	r16,r2,1
    4c54:	8421883a 	add	r16,r16,r16
    4c58:	8421883a 	add	r16,r16,r16
    4c5c:	84402004 	addi	r17,r16,128
    4c60:	a463883a 	add	r17,r20,r17
    4c64:	a421883a 	add	r16,r20,r16
    4c68:	e0001e26 	beq	fp,zero,4ce4 <__call_exitprocs+0xf4>
    4c6c:	80804017 	ldw	r2,256(r16)
    4c70:	e0801c26 	beq	fp,r2,4ce4 <__call_exitprocs+0xf4>
    4c74:	bdffffc4 	addi	r23,r23,-1
    4c78:	843fff04 	addi	r16,r16,-4
    4c7c:	8c7fff04 	addi	r17,r17,-4
    4c80:	bd7ff91e 	bne	r23,r21,4c68 <_gp+0xffff77e8>
    4c84:	00800034 	movhi	r2,0
    4c88:	10800004 	addi	r2,r2,0
    4c8c:	10000926 	beq	r2,zero,4cb4 <__call_exitprocs+0xc4>
    4c90:	a0800117 	ldw	r2,4(r20)
    4c94:	1000301e 	bne	r2,zero,4d58 <__call_exitprocs+0x168>
    4c98:	a0800017 	ldw	r2,0(r20)
    4c9c:	10003226 	beq	r2,zero,4d68 <__call_exitprocs+0x178>
    4ca0:	a009883a 	mov	r4,r20
    4ca4:	98800015 	stw	r2,0(r19)
    4ca8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x4000>
    4cac:	9d000017 	ldw	r20,0(r19)
    4cb0:	a03fe41e 	bne	r20,zero,4c44 <_gp+0xffff77c4>
    4cb4:	dfc00a17 	ldw	ra,40(sp)
    4cb8:	df000917 	ldw	fp,36(sp)
    4cbc:	ddc00817 	ldw	r23,32(sp)
    4cc0:	dd800717 	ldw	r22,28(sp)
    4cc4:	dd400617 	ldw	r21,24(sp)
    4cc8:	dd000517 	ldw	r20,20(sp)
    4ccc:	dcc00417 	ldw	r19,16(sp)
    4cd0:	dc800317 	ldw	r18,12(sp)
    4cd4:	dc400217 	ldw	r17,8(sp)
    4cd8:	dc000117 	ldw	r16,4(sp)
    4cdc:	dec00b04 	addi	sp,sp,44
    4ce0:	f800283a 	ret
    4ce4:	a0800117 	ldw	r2,4(r20)
    4ce8:	80c00017 	ldw	r3,0(r16)
    4cec:	10bfffc4 	addi	r2,r2,-1
    4cf0:	15c01426 	beq	r2,r23,4d44 <__call_exitprocs+0x154>
    4cf4:	80000015 	stw	zero,0(r16)
    4cf8:	183fde26 	beq	r3,zero,4c74 <_gp+0xffff77f4>
    4cfc:	95c8983a 	sll	r4,r18,r23
    4d00:	a0806217 	ldw	r2,392(r20)
    4d04:	a5800117 	ldw	r22,4(r20)
    4d08:	2084703a 	and	r2,r4,r2
    4d0c:	10000b26 	beq	r2,zero,4d3c <__call_exitprocs+0x14c>
    4d10:	a0806317 	ldw	r2,396(r20)
    4d14:	2088703a 	and	r4,r4,r2
    4d18:	20000c1e 	bne	r4,zero,4d4c <__call_exitprocs+0x15c>
    4d1c:	89400017 	ldw	r5,0(r17)
    4d20:	d9000017 	ldw	r4,0(sp)
    4d24:	183ee83a 	callr	r3
    4d28:	a0800117 	ldw	r2,4(r20)
    4d2c:	15bfbf1e 	bne	r2,r22,4c2c <_gp+0xffff77ac>
    4d30:	98800017 	ldw	r2,0(r19)
    4d34:	153fcf26 	beq	r2,r20,4c74 <_gp+0xffff77f4>
    4d38:	003fbc06 	br	4c2c <_gp+0xffff77ac>
    4d3c:	183ee83a 	callr	r3
    4d40:	003ff906 	br	4d28 <_gp+0xffff78a8>
    4d44:	a5c00115 	stw	r23,4(r20)
    4d48:	003feb06 	br	4cf8 <_gp+0xffff7878>
    4d4c:	89000017 	ldw	r4,0(r17)
    4d50:	183ee83a 	callr	r3
    4d54:	003ff406 	br	4d28 <_gp+0xffff78a8>
    4d58:	a0800017 	ldw	r2,0(r20)
    4d5c:	a027883a 	mov	r19,r20
    4d60:	1029883a 	mov	r20,r2
    4d64:	003fb606 	br	4c40 <_gp+0xffff77c0>
    4d68:	0005883a 	mov	r2,zero
    4d6c:	003ffb06 	br	4d5c <_gp+0xffff78dc>

00004d70 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    4d70:	defffd04 	addi	sp,sp,-12
    4d74:	df000215 	stw	fp,8(sp)
    4d78:	df000204 	addi	fp,sp,8
    4d7c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    4d80:	0001883a 	nop
    4d84:	e0bfff17 	ldw	r2,-4(fp)
    4d88:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    4d8c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    4d90:	10000226 	beq	r2,zero,4d9c <_exit+0x2c>
    ALT_SIM_FAIL();
    4d94:	002af070 	cmpltui	zero,zero,43969
    4d98:	00000106 	br	4da0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    4d9c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    4da0:	003fff06 	br	4da0 <_gp+0xffff7920>
